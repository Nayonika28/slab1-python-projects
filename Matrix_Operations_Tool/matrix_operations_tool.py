# -*- coding: utf-8 -*-
"""Matrix_Operations_Tool.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GLadBreUESwx73XWsMhahVrfdK-xpqVI
"""

import numpy as np

def print_menu():
    print("\nðŸ§® Matrix Operations Menu:")
    print("1. Matrix Addition")
    print("2. Matrix Subtraction")
    print("3. Matrix Multiplication")
    print("4. Matrix Transpose")
    print("5. Matrix Determinant")
    print("0. Exit")

def get_matrix(prompt="Enter matrix"):
    print(f"\n{prompt}")
    rows = int(input("Enter number of rows: "))
    cols = int(input("Enter number of columns: "))
    print("Enter matrix elements row-wise, separated by space:")

    matrix = []
    for i in range(rows):
        row = list(map(float, input(f"Row {i+1}: ").split()))
        matrix.append(row)

    return np.array(matrix)

def add_matrices():
    A = get_matrix("Matrix A")
    B = get_matrix("Matrix B")
    if A.shape == B.shape:
        print("\nResult (A + B):\n", A + B)
    else:
        print("Error: Matrices must be of same size for addition.")

def subtract_matrices():
    A = get_matrix("Matrix A")
    B = get_matrix("Matrix B")
    if A.shape == B.shape:
        print("\nResult (A - B):\n", A - B)
    else:
        print("Error: Matrices must be of same size for subtraction.")

def multiply_matrices():
    A = get_matrix("Matrix A")
    B = get_matrix("Matrix B")
    if A.shape[1] == B.shape[0]:
        print("\nResult (A x B):\n", A @ B)
    else:
        print("Error: Columns of A must match rows of B for multiplication.")

def transpose_matrix():
    A = get_matrix("Matrix")
    print("\nTranspose:\n", A.T)

def determinant_matrix():
    A = get_matrix("Square Matrix")
    if A.shape[0] == A.shape[1]:
        print("\nDeterminant:", round(np.linalg.det(A), 2))
    else:
        print("Error: Determinant requires a square matrix.")

def main():
    while True:
        print_menu()
        choice = input("Choose an option (0â€“5): ")

        if choice == '1':
            add_matrices()
        elif choice == '2':
            subtract_matrices()
        elif choice == '3':
            multiply_matrices()
        elif choice == '4':
            transpose_matrix()
        elif choice == '5':
            determinant_matrix()
        elif choice == '0':
            print("Exiting program. Goodbye!")
            break
        else:
            print("Invalid choice. Please select from 0â€“5.")

main()